pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
        git 'Default'
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build from')
        string(name: 'STUDENT_NAME', defaultValue: 'Sibghat Ullah', description: 'Provide your name here (no name, no marks)')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'qa', 'prod'], description: 'Select environment')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run Jest tests after build')
    }

    environment {
        APP_VERSION = "1.0.${BUILD_NUMBER}"
        MAINTAINER = "Student"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out branch: ${params.BRANCH_NAME}"
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "Installing required packages..."
                sh '''
                    echo "Fixing permission issues and installing libatomic..."
                    if [ "$(id -u)" -ne 0 ]; then
                        echo "Running as non-root user, using sudo if available..."
                        if command -v sudo >/dev/null 2>&1; then
                            sudo apt-get update && sudo apt-get install -y libatomic1
                        else
                            echo "Sudo not found. Please install libatomic1 manually."
                        fi
                    else
                        apt-get update && apt-get install -y libatomic1
                    fi

                    echo "Installing npm dependencies..."
                    npm install
                '''
            }
        }

        stage('Build') {
            steps {
                echo "Building version ${APP_VERSION} for ${params.ENVIRONMENT} environment"
                sh '''
                    echo "Simulating build process..."
                    mkdir -p build
                    cp *.js build/ || echo "No .js files to copy."
                    echo "Build completed successfully!"
                    echo "App version: ${APP_VERSION}" > build/version.txt
                '''
            }
        }

        stage('Test') {
            when {
                expression { return params.RUN_TESTS }
            }
            steps {
                echo "Running Jest tests..."
                sh '''
                    if [ -f package.json ]; then
                        npm test || echo "Tests failed or none found"
                    else
                        echo "No package.json found, skipping tests."
                    fi
                '''
            }
        }

        stage('Package') {
            steps {
                echo "Creating zip archive for version ${APP_VERSION}"
                sh '''
                    zip -r build_${APP_VERSION}.zip build || echo "Nothing to zip"
                '''
            }
        }

        stage('Deploy (Simulation)') {
            steps {
                echo "Simulating deployment of version ${APP_VERSION} to ${params.ENVIRONMENT}"
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace..."
            deleteDir()
        }
        success {
            echo "Pipeline succeeded! Version ${APP_VERSION} built and tested."
        }
        failure {
            echo "Pipeline failed! Check console output for details."
        }
    }
}
